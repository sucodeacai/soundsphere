/**
 * Definitely- and possibly-unhandled rejection handling.
 *
 * Copyright (C) 2017 Martin Poelstra
 * License: MIT
 */
import BaseError from "./BaseError";
import Promise from "./Promise";
import Trace from "./Trace";
/**
 * Base class for errors thrown when a (possibly) rejected promise is detected.
 */
export declare class BaseUnhandledRejection extends BaseError {
    /**
     * Original promise rejection reason.
     */
    reason: any;
    constructor(name: string, message: string, reason: any);
}
/**
 * Thrown when a rejected promise is explicitly terminated with `.done()`.
 */
export declare class UnhandledRejection extends BaseUnhandledRejection {
    /**
     * Trace of rejected promise or .done() handler.
     */
    trace: Trace;
    constructor(reason: any, trace: Trace);
}
/**
 * Emitted when a rejected promise isn't handled.
 * @see Promise.onPossiblyUnhandledRejection
 */
export declare class PossiblyUnhandledRejection extends BaseUnhandledRejection {
    /**
     * Rejected promise.
     */
    promise: Promise<any>;
    constructor(promise: Promise<any>);
}
/**
 * Default handler for an`UnhandledRejection` error, which contains the
 * original reason of the rejection.
 * In Node, if you don't have an `unhandledException` event handler, that will cause your
 * program to terminate after printing the error.
 * When overriding the default handler, it is recommended to keep a similar behavior,
 * as your program is likely in an unknown state.
 */
export declare function defaultUnhandledRejectionHandler(reason: any, doneTrace: Trace): void;
/**
 * Default handler for possibly unhandled rejection. It will:
 * - emit Node's `unhandledRejection` event if present, or
 * - emit an `unhandledrejection` (note small R) `PromiseRejectionEvent` on `window` or `self` if present, or
 * - log the rejection using `console.warn()`.
 *
 * Note: when attaching an `unhandledrejection` handler in the browser, make sure to
 * call `event.preventDefault()` to prevent ts-promise's default fallback logging.
 */
export declare function defaultPossiblyUnhandledRejectionHandler(promise: Promise<any>): void;
/**
 * Default handler for handled rejections.
 * It will emit Node's `rejectionHandled` event if present, or emit a
 * `rejectionhandled` (note small R) event on `window` (or `self`) if present.
 */
export declare function defaultPossiblyUnhandledRejectionHandledHandler(promise: Promise<any>): void;
