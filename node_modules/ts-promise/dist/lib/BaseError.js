"use strict";
/**
 * Base class for custom errors.
 *
 * Copyright (C) 2015 Martin Poelstra
 * License: MIT
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Base class for custom errors, which preserves stack and
 * has correct prototype chain.
 */
var BaseError = /** @class */ (function (_super) {
    __extends(BaseError, _super);
    function BaseError(name, message) {
        var _newTarget = this.constructor;
        var _this = 
        /* istanbul ignore next: internal TypeScript code */
        _super.call(this, message) || this;
        var fixStack = false;
        // This fixes the prototype chain if it's broken (when emitting for ES 5 or lower)
        /* istanbul ignore else: only run tests with ES5 emit for now */
        if (_this.constructor !== _newTarget) {
            // Object.setPrototypeOf is IE>=11 and ES6
            /* istanbul ignore else: only run tests on Node for now */
            if (Object.setPrototypeOf) {
                Object.setPrototypeOf(_this, _newTarget.prototype);
            }
            fixStack = true;
        }
        // This occurs when the error is not thrown but only created in IE
        /* istanbul ignore if: only run tests on Node for now */
        if (!("stack" in _this)) {
            fixStack = true;
        }
        _this.name = name;
        /* istanbul ignore else: only run tests on Node for now */
        if (fixStack) {
            // This.name and this.message must be set correctly in order to fix the stack correctly
            /* istanbul ignore else: only run tests on Node for now */
            if (Error.captureStackTrace) {
                Error.captureStackTrace(_this, _newTarget);
            }
            else {
                var error = new Error(message);
                error.name = name;
                try {
                    throw error;
                }
                catch (error) {
                    _this.stack = error.stack || String(error);
                }
            }
        }
        return _this;
    }
    return BaseError;
}(Error));
exports.default = BaseError;
//# sourceMappingURL=BaseError.js.map